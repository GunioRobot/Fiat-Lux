import sys
import BuildSupport

# -----------------
# LOCAL ENVIRONMENT
# ----------------
Import('env')
xenon_env = env.Clone()

# Check for BOOST & JACK libraries
conf = Configure(xenon_env)

# HACK!  This needs to be done more elegantly
conf.env.Append(CPPPATH=["/usr/local/include/aubio"])

if not conf.CheckLibWithHeader('boost_system-mt', 'boost/shared_ptr.hpp', 'c++'):
    print 'ERROR: Could not locate boost_system library'
    sys.exit(1)
if not conf.CheckLibWithHeader('boost_thread-mt', 'boost/shared_ptr.hpp', 'c++'):
    print 'ERROR: Could not locate boost_thread library'
    sys.exit(1)
if not conf.CheckLibWithHeader('boost_program_options-mt', 'boost/shared_ptr.hpp', 'c++'):
    print 'ERROR: Could not locate boost_program_options library'
    sys.exit(1)
if not conf.CheckLibWithHeader('boost_filesystem-mt', 'boost/shared_ptr.hpp', 'c++'):
    print 'ERROR: Could not locate boost_filesystem library'
    sys.exit(1)
if not conf.CheckLibWithHeader('jack', 'jack/jack.h', 'c++'):
    print 'ERROR: Could not locate jack library'
    sys.exit(1)
if not conf.CheckLibWithHeader('aubio', 'aubio.h', 'c++'):
    print 'ERROR: Could not locate jack library'
    sys.exit(1)

xenon_env = conf.Finish()
xenon_env.Append(CPPPATH = [".."])

# -----------
# CORE MODULE
# -----------
core_sources = Split("""Core/Stopwatch.cc
                        Core/System.cc
                        Core/Thread.cc
                        Core/Settings.cc
                        Core/Log.cc
                        Core/Cache.cc
                        Core/Time.cc
                        Core/Parameters.cc
                        Core/ConfigParser.cc
                        Core/Debugging.cc
                        Core/ProgressCallback.cc
                        Core/Exception.cc""")

core_lib_sources = core_sources
core_lib_target  = "xenon_core"
core_lib = BuildSupport.Library(xenon_env, target = core_lib_target, source = core_lib_sources)

# -----------
# LUX MODULE
# ----------
lux_env = xenon_env.Clone()
if sys.platform == "darwin":
    lux_env.Append(LINKFLAGS= " -framework OpenGL")
elif sys.platform == "linux2":
    lux_env.Append(LINKFLAGS= " -lGL")
lux_env.Append(LIBPATH = ["."])
lux_env.Append(LIBS = ["xenon_core"])
lux_sources = Split("""Lux/AudioClient.cc
                       Lux/LaserClient.cc
                       Lux/SimulatorClient.cc
                       Lux/AudioEngine.cc""")
lux_lib_sources = lux_sources
lux_lib_target  = "xenon_lux"
lux_lib = BuildSupport.Library(lux_env, target = lux_lib_target, source = lux_lib_sources)

# ----------------
# PYTHON BINDINGS
# ----------------
python_env = xenon_env.Clone()
python_env.Append(CPPPATH = [".."])
if sys.platform == "darwin":
    python_env.Append(CXXFLAGS = " -I/System/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6")
    python_env.Append(LINKFLAGS= " -framework Python")
elif sys.platform == "linux2":
    python_env.Append(CXXFLAGS = " -I/usr/include/python2.6/")
    python_env.Append(LINKFLAGS= " -lpython2.6")

# Set up custom builders
cython_bld = Builder(action = 'cython --cplus -o $TARGET $SOURCE')
python_env.Append(BUILDERS = {'Cython' : cython_bld})
python_env.Append(LIBPATH = ["."])

# python bindings for xenon_core
py_xenon_core_env = python_env.Clone()
py_xenon_core_env.Append(LIBS = ["xenon_core"])
py_xenon_core_sources = python_env.Cython('Python/xenon_core.cc', 'Python/xenon_core.pyx')
py_xenon_core_target  = "Python/xenon_core"
py_xenon_core_lib = py_xenon_core_env.SharedLibrary(target = py_xenon_core_target,
                                                    source = py_xenon_core_sources,
                                                    SHLIBPREFIX='', SHLIBSUFFIX='.so')

# python bindings for xenon_core
py_xenon_lux_env = python_env.Clone()
py_xenon_lux_env.Append(LIBS = ["xenon_lux"])
py_xenon_lux_sources = python_env.Cython('Python/xenon_lux.cc', 'Python/xenon_lux.pyx')
py_xenon_lux_target  = "Python/xenon_lux"
py_xenon_lux_lib = py_xenon_lux_env.SharedLibrary(target = py_xenon_lux_target,
                                                 source = py_xenon_lux_sources,
                                                 SHLIBPREFIX='', SHLIBSUFFIX='.so')

Depends(py_xenon_core_lib, py_xenon_core_sources)
Depends(py_xenon_core_lib, core_lib)
Depends(py_xenon_lux_lib, py_xenon_lux_sources)
Depends(py_xenon_lux_lib, lux_lib)
Depends(lux_lib, core_lib)
